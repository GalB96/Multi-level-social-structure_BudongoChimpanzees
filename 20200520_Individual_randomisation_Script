#####Packages required#####
library(ape)
library(asnipe)
library(igraph)
library(vegan)
library(effsize)
library(ggplot2)
library(data.table)
library(adehabitatHR)

rm(list=ls())
ls()

save.image("/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/R_workspaces/Revised_analysis_20210520.RData")

setwd("/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions")
load("/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/R_workspaces/Revised_analysis_20210520.Rdata")
#upload gbi data for Sonso
sgbi1<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi2<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi3<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi<-cbind(sgbi1,sgbi2,sgbi3)
sgbi<-as.matrix(sgbi)
Sonso<-t(sgbi)

#upload attributes for each individual
Sattributes<-read.csv(file.choose(),header = TRUE)
#define columns of gbi data by indiviual ID
colnames(Sonso)<-Sattributes$ID

#create network object
networkS<-get_network(association_data=Sonso, data_format="GBI")

#build adjacency graph for simple ratio network
netS<-graph.adjacency(networkS, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
permutations<-10000 #use 1000 permutations
randomS <- network_permutation(Sonso, association_matrix=networkS, permutations=permutations)


#calculate mean weight in random networks
randomES<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES[i] <- mean(edges$weight)} 

mean(randomES)

#create network with only above random edges
Scut.off<-mean(randomES)
dil_netS <- delete_edges(netS, E(netS)[weight<Scut.off])
plot(dil_netS,edge.width= E(netS)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5) 
     
#calculate network measures Sonso, check if they are different from random networks
#transitivity 
obsSt<-transitivity(netS)

	#create object that holds results for all the random networks
random.St<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.St[i] <- transitivity(net.r)} 
  
  #plot histogram of results from random networks with observed result in as red line
hist(random.St, breaks=1,col="grey", main = "Sonso", xlab = "Transitivity")
abline(v=obsSt, col="red")#add line for observed measure

	#compare results from random and observed networks
sum(random.St >= obsSt)/10000
sum(random.St <= obsSt)/10000

#mean strength 
obsSstr<-mean(strength(netS))
range(strength(netS))
mean(strength(netS))
sd(strength(netS))

	#create object that holds results for all the random networks
random.Sstr<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.Sstr[i] <- mean(strength(net.r))} 
  
	 #plot histogram of results from random networks with observed result in as red line
hist(random.Sstr, breaks=50,col="grey", main = "Sonso", xlab = "Mean Strength")
abline(v=obsSstr, col="red")

	#compare results from random and observed networks
sum(random.Sstr >= obsSstr)/10000
sum(random.Sstr <= obsSstr)/10000

#modularity 
clusS<- cluster_louvain(netS) #calculate clusterng algorithm (Louavain's)
obsmodS<-modularity(clusS) #calculate modularity

	#create object that holds results for all the random networks
random.modS<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  random.modS[i] <- modularity(clus)} 
  
	#plot histogram of results from random networks with observed result in as red line
hist(random.modS, breaks=50,col="grey", main = "Sonso", xlab = "Modularity")
abline(v=obsmodS, col="red")

	#compare results from random and observed networks
sum(random.modS >= obsmodS)/10000
sum(random.modS <= obsmodS)/10000   


#upload gbi data for Sonso
wgbi1<-as.matrix(read.csv(file.choose(),header=FALSE))
wgbi2<-as.matrix(read.csv(file.choose(),header=FALSE))
wgbi<-cbind(wgbi1,wgbi2) #combine the group by individual data wgbi<-as.matrix(wgbi)
Waibira<-t(wgbi)


#upload attributes for each individual
Wattributes<-read.csv(file.choose(),header = TRUE)#use Sattributes.csv/ Wattributes.csv
#define columns of gbi data by indiviual ID
colnames(Waibira)<-Wattributes$ID

#create network object
networkW<- get_network(association_data=Waibira, data_format="GBI")

#build adjacency graph for simple ratio network
netW<-graph.adjacency(networkW, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW <- network_permutation(Waibira, association_matrix=networkW, permutations=permutations)

#calculate mean random edge weight 
randomEW<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW[i] <- mean(edges$weight)} 

mean(randomEW)

#create above chance edges network
Wcut.off<-mean(randomEW)
dil_netW <- delete_edges(netW, E(netW)[weight<Wcut.off])
plot(dil_netW,edge.width= E(netW)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5) 
     
#calculate network measures
#transitivity 
obsWt<-transitivity(netW)

	#create object that holds results for all the random networks
random.Wt<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.Wt[i] <- transitivity(net.r)} 
  
  #plot histogram of results from random networks with observed result in as red line
hist(random.Wt, breaks=1,col="grey", main = "Waibira", xlab = "Transitivity")
abline(v=obsWt, col="red")#add line for observed measure

	#compare results from random and observed networks
sum(random.Wt >= obsWt)/10000
sum(random.Wt <= obsWt)/10000

#mean strength 
obsWstr<-mean(strength(netW))
range(strength(netW))
sd(strength(netW))

	#create object that holds results for all the random networks
random.Wstr<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.Wstr[i] <- mean(strength(net.r))} 
  
	 #plot histogram of results from random networks with observed result in as red line
hist(random.Wstr, breaks=50,col="grey", main = "Waibira", xlab = "Mean Strength")
abline(v=obsWstr, col="red")

	#compare results from random and observed networks
sum(random.Wstr >= obsWstr)/10000
sum(random.Wstr <= obsWstr)/10000

#modularity 
clusW<- cluster_louvain(netW) #calculate clusterng algorithm (Louavain's)
obsmodW<-modularity(clusW) #calculate modularity

	#create object that holds results for all the random networks
random.modW<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  random.modW[i] <- modularity(clus)} 
  
	#plot histogram of results from random networks with observed result in as red line
hist(random.modW, breaks=50,col="grey", main = "Waibira", xlab = "Modularity")
abline(v=obsmodW, col="red")

	#compare results from random and observed networks
sum(random.modW >= obsmodW)/10000
sum(random.modW <= obsmodW)/10000


#create Waibira_A network
Waibira_A<-subset(Waibira, select=c("ALF", "BEN", "DOU", "FID", "GER","MAC", "MAS", "TAL", "TRS"))

#create network object
networkWA<- get_network(association_data=Waibira_A, data_format="GBI")

#build adjacency graph for simple ratio network
netWA<-graph.adjacency(networkWA, mode="undirected", weighted=TRUE, diag=FALSE)


#create random networks through data stream permutation
randomWA <- network_permutation(Waibira_A, association_matrix=networkWA, permutations=permutations)

#calculate mean random edge weight 
randomEWA<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWA[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEWA[i] <- mean(edges$weight)} 

mean(randomEWA)

#create above chance edges network
WAcut.off<-mean(randomEWA)
dil_netWA <- delete_edges(netWA, E(netWA)[weight<WAcut.off])
plot(dil_netWA,edge.width= E(netWA)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5) 
     
#calculate network measures
#transitivity 
obsWAt<-transitivity(netWA)

	#create object that holds results for all the random networks
random.WAt<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWA[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.WAt[i] <- transitivity(net.r)} 
  
  #plot histogram of results from random networks with observed result in as red line
hist(random.WAt, breaks=1,col="grey", main = "Waibira_A", xlab = "Transitivity")
abline(v=obsWAt, col="red")#add line for observed measure

	#compare results from random and observed networks
sum(random.WAt >= obsWAt)/10000
sum(random.WAt <= obsWAt)/10000

#mean strength 
obsWAstr<-mean(strength(netWA))

	#create object that holds results for all the random networks
random.WAstr<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWA[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.WAstr[i] <- mean(strength(net.r))} 
  
	 #plot histogram of results from random networks with observed result in as red line
hist(random.WAstr, breaks=50,col="grey", main = "Waibira_A", xlab = "Mean Strength")
abline(v=obsWAstr, col="red")

	#compare results from random and observed networks
sum(random.WAstr >= obsWAstr)/10000
sum(random.WAstr <= obsWAstr)/10000

#modularity 
clusWA<- cluster_louvain(netWA) #calculate clusterng algorithm (Louavain's)
obsmodWA<-modularity(clusWA) #calculate modularity

	#create object that holds results for all the random networks
random.modWA<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWA[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  random.modWA[i] <- modularity(clus)} 
  
	#plot histogram of results from random networks with observed result in as red line
hist(random.modWA, breaks=50,col="grey", main = "Waibira_A", xlab = "Modularity")
abline(v=obsmodWA, col="red")

	#compare results from random and observed networks
sum(random.modWA >= obsmodWA)/10000
sum(random.modWA <= obsmodWA)/10000

#create Waibira_B network
Waibira_B<-subset(Waibira, select=c("ABO", "ARD", "CHN", "DAU","ILA", "KAS", "KEV","LAF", "LAN", "MOR", "MUG", "SAM", "URS"))

#create network object
networkWB<- get_network(association_data=Waibira_B, data_format="GBI")

#build adjacency graph for simple ratio network
netWB<-graph.adjacency(networkWB, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomWB <- network_permutation(Waibira_B, association_matrix=networkWB, permutations=permutations)

#calculate mean random edge weight 
randomEWB<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWB[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEWB[i] <- mean(edges$weight)} 

mean(randomEWB)

#create above chance edges network
WBcut.off<-mean(randomEWB)
#choose Waibira full mean randomE so that we keep unconnected nodes unconnected (only one dyad within Waibira B are connected in the full Waibira network)
dil_netWB <- delete_edges(netWB, E(netWB)[weight<Wcut.off])
plot(dil_netWB,edge.width= E(netWB)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5) 

#calculate network measures
#transitivity 
obsWBt<-transitivity(netWB)

	#create object that holds results for all the random networks
random.WBt<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWB[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.WBt[i] <- transitivity(net.r)} 
  
  #plot histogram of results from random networks with observed result in as red line
hist(random.WBt, breaks=1,col="grey", main = "Waibira_B", xlab = "Transitivity")
abline(v=obsWBt, col="red")#add line for observed measure

	#compare results from random and observed networks
sum(random.WBt >= obsWBt)/10000
sum(random.WBt <= obsWBt)/10000

#mean strength 
obsWBstr<-mean(strength(netWB))

	#create object that holds results for all the random networks
random.WBstr<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWB[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.WBstr[i] <- mean(strength(net.r))} 
  
	 #plot histogram of results from random networks with observed result in as red line
hist(random.WBstr, breaks=50,col="grey", main = "Waibira_B", xlab = "Mean Strength")
abline(v=obsWBstr, col="red")

	#compare results from random and observed networks
sum(random.WBstr >= obsWBstr)/10000
sum(random.WBstr <= obsWBstr)/10000

#modularity 
clusWB<- cluster_louvain(netWB) #calculate clusterng algorithm (Louavain's)
obsmodWB<-modularity(clusWB) #calculate modularity

	#create object that holds results for all the random networks
random.modWB<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWB[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  random.modWB[i] <- modularity(clus)} 
  
	#plot histogram of results from random networks with observed result in as red line
hist(random.modWB, breaks=50,col="grey", main = "Waibira_B", xlab = "Modularity")
abline(v=obsmodWB, col="red")

	#compare results from random and observed networks
sum(random.modWB >= obsmodWB)/10000
sum(random.modWB <= obsmodWB)/10000

#distance between graphs
setwd("/Users/gb64/Desktop/")
write_graph(dil_netS, "/Users/gb64/Desktop/elS.txt")
write_graph(dil_netW, "/Users/gb64/Desktop/elW.txt")
write_graph(dil_netWA, "/Users/gb64/Desktop/elWA.txt")
write_graph(dil_netWB, "/Users/gb64/Desktop/elWB.txt")


D_full<-D("elS.txt","elW.txt",0.45,0.45,0.1)
D_S_WA<-D("elS.txt","elWA.txt",0.45,0.45,0.1)
D_S_WB<-D("elS.txt","elWB.txt",0.45,0.45,0.1)


#year by year comparison 
#upload gbi data for Sonso
sgbi_15<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi_15<-as.matrix(sgbi_15)
Sonso_15<-t(sgbi_15)


#define columns of gbi data by indiviual ID
colnames(Sonso_15)<-Sattributes$ID

#create network object
networkS_15<-get_network(association_data=Sonso_15, data_format="GBI")

#build adjacency graph for simple ratio network
netS_15<-graph.adjacency(networkS_15, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomS_15 <- network_permutation(Sonso_15, association_matrix=networkS_15, permutations=permutations)


#calculate mean weight in random networks
randomES_15<-rep(NA, 1000)
for (i in 1:1000){
  net.r<-graph.adjacency(randomS_15[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_15[i] <- mean(edges$weight)} 

mean(randomES_15)

#create network with only above random edges
Scut.off_15<-mean(randomES_15)
dil_netS_15 <- delete_edges(netS_15, E(netS_15)[weight<Scut.off_15])
plot(dil_netS_15)
write_graph(dil_netS_15, "/Users/gb64/Desktop/elS_15.txt")

#upload gbi data for Sonso
sgbi_16<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi_16<-as.matrix(sgbi_16)
Sonso_16<-t(sgbi_16)

#define columns of gbi data by indiviual ID
colnames(Sonso_16)<-Sattributes$ID

#create network object
networkS_16<-get_network(association_data=Sonso_16, data_format="GBI")

#build adjacency graph for simple ratio network
netS_16<-graph.adjacency(networkS_16, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomS_16 <- network_permutation(Sonso_16, association_matrix=networkS_16, permutations=permutations)


#calculate mean weight in random networks
randomES_16<-rep(NA, 1000)
for (i in 1:1000){
  net.r<-graph.adjacency(randomS_16[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_16[i] <- mean(edges$weight)} 

mean(randomES_16)

#create network with only above random edges
Scut.off_16<-mean(randomES_16)
dil_netS_16 <- delete_edges(netS_16, E(netS_16)[weight<Scut.off_16])
plot(dil_netS_16)
write_graph(dil_netS_16, "/Users/gb64/Desktop/elS_16.txt")

#upload gbi data for Sonso
sgbi_17<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi_17<-as.matrix(sgbi_17)
Sonso_17<-t(sgbi_17)

#define columns of gbi data by indiviual ID
colnames(Sonso_17)<-Sattributes$ID

#create network object
networkS_17<-get_network(association_data=Sonso_17, data_format="GBI")

#build adjacency graph for simple ratio network
netS_17<-graph.adjacency(networkS_17, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomS_17 <- network_permutation(Sonso_17, association_matrix=networkS_17, permutations=permutations)


#calculate mean weight in random networks
randomES_17<-rep(NA, 1000)
for (i in 1:1000){
  net.r<-graph.adjacency(randomS_17[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_17[i] <- mean(edges$weight)} 

mean(randomES_17)

#create network with only above random edges
Scut.off_17<-mean(randomES_17)
dil_netS_17 <- delete_edges(netS_17, E(netS_17)[weight<Scut.off_17])
plot(dil_netS_17)
write_graph(dil_netS_17, "/Users/gb64/Desktop/elS_17.txt")

#upload gbi data for Sonso
sgbi_18<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi_18<-as.matrix(sgbi_18)
Sonso_18<-t(sgbi_18)

#define columns of gbi data by indiviual ID
colnames(Sonso_18)<-Sattributes$ID

#create network object
networkS_18<-get_network(association_data=Sonso_18, data_format="GBI")

#build adjacency graph for simple ratio network
netS_18<-graph.adjacency(networkS_18, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomS_18 <- network_permutation(Sonso_18, association_matrix=networkS_18, permutations=permutations)


#calculate mean weight in random networks
randomES_18<-rep(NA, 1000)
for (i in 1:1000){
  net.r<-graph.adjacency(randomS_18[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_18[i] <- mean(edges$weight)} 

mean(randomES_18)

#create network with only above random edges
Scut.off_18<-mean(randomES_18)
dil_netS_18 <- delete_edges(netS_18, E(netS_18)[weight<Scut.off_18])
plot(dil_netS_18)
write_graph(dil_netS_18, "/Users/gb64/Desktop/elS_18.txt")

#Year by year comparison
D_S15_S16<-D("elS_15.txt","elS_16.txt",0.45,0.45,0.1)
D_S15_S17<-D("elS_15.txt","elS_17.txt",0.45,0.45,0.1)
D_S15_S18<-D("elS_15.txt","elS_18.txt",0.45,0.45,0.1)
D_S16_S17<-D("elS_16.txt","elS_17.txt",0.45,0.45,0.1)
D_S16_S18<-D("elS_16.txt","elS_18.txt",0.45,0.45,0.1)
D_S17_S18<-D("elS_17.txt","elS_18.txt",0.45,0.45,0.1)

#year by year comparison Waibira
#upload gbi data for Sonso
wgbi_15<-as.matrix(read.csv(file.choose(),header=FALSE))
wgbi_15<-as.matrix(wgbi_15)
Waibira_15<-t(wgbi_15)


#define columns of gbi data by indiviual ID
colnames(Waibira_15)<-Wattributes$ID

#create network object
networkW_15<-get_network(association_data=Waibira_15, data_format="GBI")

#build adjacency graph for simple ratio network
netW_15<-graph.adjacency(networkW_15, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_15 <- network_permutation(Waibira_15, association_matrix=networkW_15, permutations=permutations)


#calculate mean weight in random networks
randomEW_15<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_15[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_15[i] <- mean(edges$weight)} 

mean(randomEW_15)

#create network with only above random edges
Wcut.off_15<-mean(randomEW_15)
dil_netW_15 <- delete_edges(netW_15, E(netW_15)[weight<Wcut.off_15])
plot(dil_netW_15)
write_graph(dil_netW_15, "/Users/gb64/Desktop/elW_15.txt")

#upload gbi data for Sonso
wgbi_16<-as.matrix(read.csv(file.choose(),header=FALSE))
wgbi_16<-as.matrix(wgbi_16)
Waibira_16<-t(wgbi_16)

#define columns of gbi data by indiviual ID
colnames(Waibira_16)<-Wattributes$ID

#create network object
networkW_16<-get_network(association_data=Waibira_16, data_format="GBI")

#build adjacency graph for simple ratio network
netW_16<-graph.adjacency(networkW_16, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_16 <- network_permutation(Waibira_16, association_matrix=networkW_16, permutations=permutations)


#calculate mean weight in random networks
randomEW_16<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_16[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_16[i] <- mean(edges$weight)} 

mean(randomEW_16)

#create network with only above random edges
Wcut.off_16<-mean(randomEW_16)
dil_netW_16 <- delete_edges(netW_16, E(netW_16)[weight<Wcut.off_16])
plot(dil_netW_16)
write_graph(dil_netW_16, "/Users/gb64/Desktop/elW_16.txt")

#upload gbi data for Sonso
wgbi_17<-as.matrix(read.csv(file.choose(),header=FALSE))
wgbi_17<-as.matrix(wgbi_17)
Waibira_17<-t(wgbi_17)

#define columns of gbi data by indiviual ID
colnames(Waibira_17)<-Wattributes$ID

#create network object
networkW_17<-get_network(association_data=Waibira_17, data_format="GBI")

#build adjacency graph for simple ratio network
netW_17<-graph.adjacency(networkW_17, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_17 <- network_permutation(Waibira_17, association_matrix=networkW_17, permutations=permutations)


#calculate mean weight in random networks
randomEW_17<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_17[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_17[i] <- mean(edges$weight)} 

mean(randomEW_17)

#create network with only above random edges
Wcut.off_17<-mean(randomEW_17)
dil_netW_17 <- delete_edges(netW_17, E(netW_17)[weight<Wcut.off_17])
plot(dil_netW_17)
write_graph(dil_netW_17, "/Users/gb64/Desktop/elW_17.txt")

#upload gbi data for Sonso
wgbi_18<-as.matrix(read.csv(file.choose(),header=FALSE))
wgbi_18<-as.matrix(wgbi_18)
Waibira_18<-t(wgbi_18)

#define columns of gbi data by indiviual ID
colnames(Waibira_18)<-Wattributes$ID

#create network object
networkW_18<-get_network(association_data=Waibira_18, data_format="GBI")

#build adjacency graph for simple ratio network
netW_18<-graph.adjacency(networkW_18, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_18 <- network_permutation(Waibira_18, association_matrix=networkW_18, permutations=permutations)


#calculate mean weight in random networks
randomEW_18<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_18[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_18[i] <- mean(edges$weight)} 

mean(randomEW_18)

#create network with only above random edges
Wcut.off_18<-mean(randomEW_18)
dil_netW_18 <- delete_edges(netW_18, E(netW_18)[weight<Wcut.off_18])
plot(dil_netW_18)
write_graph(dil_netW_18, "/Users/gb64/Desktop/elW_18.txt")

#Year by year comparison
D_W15_W16<-D("elW_15.txt","elW_16.txt",0.45,0.45,0.1)
D_W15_W17<-D("elW_15.txt","elW_17.txt",0.45,0.45,0.1)
D_W15_W18<-D("elW_15.txt","elW_18.txt",0.45,0.45,0.1)
D_W16_W17<-D("elW_16.txt","elW_17.txt",0.45,0.45,0.1)
D_W16_W18<-D("elW_16.txt","elW_18.txt",0.45,0.45,0.1)
D_W17_W18<-D("elW_17.txt","elW_18.txt",0.45,0.45,0.1)


#Old analysis with same data
Sstr.Rdiff<-rep(NA, 1000)
for (i in 1:1000){
  net.r<-graph.adjacency(randomS[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  Sstr.Rdiff[i] <- abs(obsSstr-mean(strength(net.r)))} 
  
  #modularity
  modS.Rdiff<-rep(NA, 1000)
for (i in 1:1000){
  net.r<-graph.adjacency(randomS[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  modS.Rdiff[i] <- abs(obsmodS-modularity(clus))} 


Wstr.Rdiff<-rep(NA, 1000)
for (i in 1:1000){
  net.r<-graph.adjacency(randomW[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  Wstr.Rdiff[i] <- abs(obsWstr-mean(strength(net.r)))} 
  
  #modularity
  modW.Rdiff<-rep(NA, 1000)
for (i in 1:1000){
  net.r<-graph.adjacency(randomW[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  modW.Rdiff[i] <- abs(obsmodW-modularity(clus))} 
#####comparison of deviations from random networks between communities using t.est and Cohen's D #####

#t.test 
Str_t<-t.test(Sstr.Rdiff,Wstr.Rdiff) 
Mod_t<-t.test(modS.Rdiff, modW.Rdiff) 

	#e.g. creating data frame - strength
S<-as.data.frame(Sstr.Rdiff) #define as data frame (here we first used mean strength and later add modularity as another column but this order is not important)
S$Group<-"Sonso" #create an extra column including the group name
S$Mod<-modS.Rdiff #add column with modularity results
colnames(S)[1]  <- "Strength" #rename the first column to represent mean strength
head(S) #view first six rows of new data frame


	#e.g. creating data frame
W<-as.data.frame(Wstr.Rdiff) #define as data frame (here we first used mean strength and later add modularity as another column but this order is not important)
W$Group<-"Waibira" #create an extra column including the group name
W$Mod<-modW.Rdiff #add column with modularity results
colnames(W)[1]  <- "Strength" #rename the first column to represent mean strength
head(W) #view first six rows of new data frame

	#combine two data frame to be compare, in this case Sonso and Waibira
SW<-rbind(S,W)
head(SW)

	#calculate Cohen's D using "effsize"package
binVar_Gr<-as.factor(SW$Group)#define the bin variable 
scaleVar_Str<-as.numeric(SW$Strength)#define the scale variable (values obtained from network measure calculations in this case mean strength)
Cohen_Str<-cohen.d(scaleVar_Str~binVar_Gr)

	#calculate Cohen's D using "effsize"package
scaleVar_Mod<-as.numeric(SW$Mod)#define the scale variable (values obtained from network measure calculations in this case mean strength)
Cohen_Mod<-cohen.d(scaleVar_Mod~binVar_Gr)

Wattributes$ID

#comparing degree between subgroup
Wattributes$DEGREE.r <- rowSums(networkW)#calculate Strength of each individual and add to attribute table
Wattributes$Group<-c("B","A","B","A","B","B","A","A","A","B","B","B","B","B","A", "A", "B", "B", "B", "A", "A", "B" ) #assign group membership to each individual based on Louvain's clustering algorithm (above) and add to attribute table
Wattributes$Colour<-c("blue","red","blue","red","blue","blue","red","red","red","blue","blue","blue","blue","blue","red","red","blue","blue","blue","red","red","blue") #assign colour to each individual based on their subgroup membership and add to attribute table

	#calculate the coefficietn from the linear model:  'the effect of subgroup membership on Strength'
coef.r <- coefficients(lm(DEGREE.r~Group,data=Wattributes))[2]

	#see model results 
summary(lm(DEGREE.r~Group,data=Wattributes))

	# Calculate strength distribution for each random network
deg_rand <- apply(randomW,1,function(x) { rowSums(x)})

	# Get coefficients for each randomisation
coefs <- apply(deg_rand,2,function(x) { coefficients(lm(x~Group,data=Wattributes))[2] })

# P values: check if the observed coefficient is significantly more or less than expected by chance
sum(coef.r<coefs)/1000
sum(coef.r>coefs)/1000

#####Waibira Range calculations of range overlap between Waibira_A and Waibira_B#####
#use either All_ranging_CBlock.csv or FirstDaily_Ranging_CBlock.csv depending on whether calculating only with first daily observation or all observations
wbr<-read.csv(file.choose(),header = TRUE) 
head(wbr)
#subset full dataset for the parties in which each individual is present
abo<-subset(wbr,wbr$ABO=="1")
alf<-subset(wbr,wbr$ALF=="1")
ard<-subset(wbr,wbr$ARD=="1")
ben<-subset(wbr,wbr$BEN=="1")
chn<-subset(wbr,wbr$CHN=="1")
dau<-subset(wbr,wbr$DAU=="1")
dou<-subset(wbr,wbr$DOU=="1")
fid<-subset(wbr,wbr$FID=="1")
ger<-subset(wbr,wbr$GER=="1")
ila<-subset(wbr,wbr$ILA=="1")
kas<-subset(wbr,wbr$KAS=="1")
kev<-subset(wbr,wbr$KEV=="1")
laf<-subset(wbr,wbr$LAF=="1")
lan<-subset(wbr,wbr$LAN=="1")
mac<-subset(wbr,wbr$MAC=="1")
mas<-subset(wbr,wbr$MAS=="1")
mor<-subset(wbr,wbr$MOR=="1")
mug<-subset(wbr,wbr$MUG=="1")
sam<-subset(wbr,wbr$SAM=="1")
tal<-subset(wbr,wbr$TAL=="1")
trs<-subset(wbr,wbr$TRS=="1")
urs<-subset(wbr,wbr$URS=="1")

##add a column includig the ID of the individual 
abo$ID<-ifelse(abo$ABO=="1","ABO")
alf$ID<-ifelse(alf$ALF=="1","ALF")
ard$ID<-ifelse(ard$ARD=="1","ARD")
ben$ID<-ifelse(ben$BEN=="1","BEN")
chn$ID<-ifelse(chn$CHN=="1","CHN")
dau$ID<-ifelse(dau$DAU=="1","DAU")
dou$ID<-ifelse(dou$DOU=="1","DOU")
fid$ID<-ifelse(fid$FID=="1","FID")
ger$ID<-ifelse(ger$GER=="1","GER")
ila$ID<-ifelse(ila$ILA=="1","ILA")
kas$ID<-ifelse(kas$KAS=="1","KAS")
kev$ID<-ifelse(kev$KEV=="1","KEV")
laf$ID<-ifelse(laf$LAF=="1","LAF")
lan$ID<-ifelse(lan$LAN=="1","LAN")
mac$ID<-ifelse(mac$MAC=="1","MAC")
mas$ID<-ifelse(mas$MAS=="1","MAS")
mor$ID<-ifelse(mor$MOR=="1","MOR")
mug$ID<-ifelse(mug$MUG=="1","MUG")
sam$ID<-ifelse(sam$SAM=="1","SAM")
tal$ID<-ifelse(tal$TAL=="1","TAL")
trs$ID<-ifelse(trs$TRS=="1","TRS")
urs$ID<-ifelse(urs$URS=="1","URS")

#create dataframe with everyone's ranging patterns by individual instead of by party
all<-rbind(abo,alf,ard,ben,chn,dau,dou,fid,ger,ila,kas,kev,laf,lan,mac,mas,mor,mug,sam,trs,tal,urs)
head(all)


#create smaller data frame from the one above in which only the lat, lon and ID columns are present
comp<-cbind.data.frame(all$lat,all$lon,all$ID)
colnames(comp) <- c("lat", "lon","ID")
head(comp)

#create file of coordinates only
xy<-cbind(comp$lat,comp$lon)
xy<-SpatialPoints(xy)
#create spatial point data frame
spdf <- SpatialPointsDataFrame(coords = xy, data = comp,bbox=NULL,match.ID=TRUE,
                               proj4string = CRS(as.character(NA)))
head(spdf)
spdf@data <- spdf@data %>% 
  dplyr::select(3) #keeps column 2 in the spdf object.


#kernel overlap function: creates matrix reporting the percentage of home range over lap between each dyad. This function was ran on each of the kernals reported (here 95% of individual home range)
k<-kerneloverlap(spdf[,1],method = "HR",percent = 95,conditional = FALSE)
k#this is the matrix, we export it from R and rearrange this matrix in excel to include 5 columns. The first two columns include the ID of each individual in the dyad, the 3rd includeds the percent overlap between their home ranges, the 4th and 5th column indicate the subgroup each individual belongs to and the final column indicates if the two individuals are in the same or different subgroups 

write.csv(k, "/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/csvs/Waibira/ranging/K-overlap/first/1block_a_5k.csv")
#t.test comparing overlap between dyads in the same or different subgroups: this t-test was repeated for each kernal measures
#use any/all of overlap csvs separately 
#(e.g. All_overlap5csv = overlap of 5% core area between males with all observations included/ FirstDaily_overlap5.csv = same but with just first daily observaton)
perc<-read.csv(file.choose(), header=TRUE)
t.test(perc$K~perc$match)

#subgroup stability across the years Waibira
clusW15<- cluster_louvain(netW_15) 
clusW16<- cluster_louvain(netW_16) 
clusW17<- cluster_louvain(netW_17) 
clusW18<- cluster_louvain(netW_18)


Wattributes$ID 
WA_15<-c("BDFGHIOPSU")
WA_16<-c("BDGHIOPSTU")
WA_17a<-c("ACDFHJMNRST")
WA_17b<-c("BGIKOPU")
WA_18<-c("BCFGHIJMNOPRSU")

library(stringdist)
stringdist(WA_15, WA_16)
stringdist(WA_15, WA_17a)
stringdist(WA_15, WA_17b)
stringdist(WA_15, WA_18)
stringdist(WA_16, WA_17a)
stringdist(WA_16, WA_17b)
stringdist(WA_17a, WA_18)
stringdist(WA_17b, WA_18)

#mantel test
par(mfrow=c(4,3))
mants1<-mantel.test(networkS_15,networkS_16, nperm=1000, graph = T, alternative = "greater",main="a) 2015/2016")
mants2<-mantel.test(networkS_15,networkS_17, nperm=1000, graph = T, alternative = "greater",main="b) 2015/2017")
mants3<-mantel.test(networkS_15,networkS_18, nperm=1000, graph = T, alternative = "greater",main="c) 2015/2018")
mants4<-mantel.test(networkS_16, networkS_17, nperm=1000, graph = T, alternative = "greater",main="d) 2016/2017")
mants5<-mantel.test(networkS_16, networkS_18, nperm=1000, graph = T, alternative = "greater",main="e) 2016/2018")
mants6<-mantel.test(networkS_17, networkS_18, nperm=1000, graph = T, alternative = "greater",main="f) 2017/2018")

mantw1<-mantel.test(networkW_15,networkW_16, nperm=1000, graph = T, alternative = "greater",main="g) 2015/2016")
mantw2<-mantel.test(networkW_15,networkW_17, nperm=1000, graph = T, alternative = "greater",main="h) 2015/2017")
mantw3<-mantel.test(networkW_15,networkW_18, nperm=1000, graph = T, alternative = "greater",main="i) 2015/2018")
mantw4<-mantel.test(networkW_16, networkW_17, nperm=1000, graph = T, alternative = "greater",main="j) 2016/2017")
mantw5<-mantel.test(networkW_16, networkW_18, nperm=1000, graph = T, alternative = "greater",main="k) 2016/2018")
mantw6<-mantel.test(networkW_17, networkW_18, nperm=1000, graph = T, alternative = "greater",main="l) 2017/2018")

dev.copy2pdf(file= "/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/Figures/SuppFig1_20210520.pdf")

#Figures!

#Figure 1: ages

#Figure 1: Histogram of Waibira and Sonso network measures from null models and observed values
par(mfrow=c(2,3))
hist(random.St, breaks=1,col="grey", main = "A)", xlab = "Transitivity")
par(xpd = TRUE)
lines(x = c(obsSt,obsSt), y = c(0, par('usr')[4]), col="red")

hist(random.Sstr, breaks=50,col="grey", main = "B)", xlab = "Mean Strength")
par(xpd = TRUE)
lines(x = c(obsSstr,obsSstr), y = c(0, par('usr')[4]), col="red")

hist(random.modS, breaks=50,col="grey", main = "C)", xlab = "Modularity")
par(xpd = TRUE)
lines(x = c(obsmodS,obsmodS), y = c(0, par('usr')[4]), col="red")

hist(random.Wt, breaks=1,col="grey", main = "D)", xlab = "Transitivity")
par(xpd = TRUE)
lines(x = c(obsWt,obsWt), y = c(0, par('usr')[4]), col="red")

hist(random.Wstr, breaks=50,col="grey", main = "E)", xlab = "Mean Strength")
par(xpd = TRUE)
lines(x = c(obsWstr,obsWstr), y = c(0, par('usr')[4]), col="red")

hist(random.modW, breaks=50,col="grey", main = "F)", xlab = "Modularity")
par(xpd = TRUE)
lines(x = c(obsmodW,obsmodW), y = c(0, par('usr')[4]), col="red")

dev.copy2pdf(file= "/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/Figures/Figure1ms_20210520.pdf")

#Figure 2: Sociograms for Waibira and Sonso
#Waibira

V(dil_netW)$community <- clusW$membership#set group membership
V(dil_netW)$shape <- c("circle", "square")[V(dil_netW)$community]#set group membership by shap

#set plot space
par(mfrow=c(1,2),mar=c(1,1,1,1))
#plot Waibira sociogram
plot(dil_netW, vertex.color="dimgrey",#plot sociograph
     edge.width=E(netW)$weight*7,edge.color="grey"(alpha=0.30, level=0.25),vertex.size=(strength(netW)*3),
     vertex.label=NA, vertex.frame.color="white")
title("Waibira", cex.main=1)

     
#Sonso

#plot Sonso sociogram
plot(dil_netS, vertex.color="dimgrey",#plot sociograph
     edge.width=E(netS)$weight*7,edge.color="grey"(alpha=0.30, level=0.25),vertex.size=(strength(netS)*3),
     vertex.label=NA, vertex.frame.color="white")
title("Sonso", cex.main=1)

dev.copy2pdf(file= "/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/Figures/Figure2ms_20210520.pdf")


#elo.plot Figure S2
library(EloRating)
pgs<-read.csv(file.choose(),header = TRUE)#add Waibira_mm_pg.csv (dataset with male pant grunts)

#create elo-rating seqence
elo<-elo.seq(winner = pgs$Winner, loser = pgs$Loser, Date = pgs$Date,draw=NULL, presence = NULL,
            startvalue = 1000, k=200, normprob = TRUE, init = "average",
             intensity = NULL, iterate = 0, runcheck = FALSE, progressbar = FALSE)
 #create object with individuals who are included in the study            
m<-c("ABO", "ALF", "ARD", "BEN","CHN", "DAU", "DOU", "FID", "GER", "ILA", "KAS", "KEV", "LAF", "LAN", "MAC", "MAS", "MOR", "MUG", "SAM", "TAL", "TRS", "URS" )
#extract the elo-rating of the individuals included in the study
extract_elo(elo, "2019-09-30",IDs = m)

eloplot(elo, ids=m,from="start", to = "2019-09-30", color = TRUE )#get plot of rank progression 
dev.copy2pdf(file= "/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/Figures/SuppFig2_20210520.pdf")

#Figure 3
par(mfrow=c(1,2),cex.lab=1.5,mar=c(4,4,1,1), tck=0.01, mgp=c(2.5,0.5,0),las=1)

# Plot original boxplot
plot(Wattributes$DEGREE.r~factor(Wattributes$Group),xlab="Group",ylab="Strength (original)",cex.axis=1, tck=0.01)
text(par('usr')[1] - (par('usr')[2]-par('usr')[1])/5,par('usr')[4] - (par('usr')[4]-par('usr')[3])/15, "A", cex=1.5) 

# Plot resulting distribution histogram
a <- hist(coefs,xlim=c(min(coefs),max(coefs)),col="black",xlab="Coefficient value",ylab="Frequency",breaks=100,cex.axis=1,main="", tck=0.01)
segments(coef.r,0,coef.r,max(a$counts),col="red",lwd=3)
box()
text(par('usr')[1] - (par('usr')[2]-par('usr')[1])/5,par('usr')[4] - (par('usr')[4]-par('usr')[3])/15, "B", cex=1.5) 
dev.copy2pdf(file= "/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/Figures/Figure3ms_20210520.pdf")

#figure 4
library(dplyr)
library(adehabitatHR)
library(gplots)

gapa<-read.csv(file.choose(),check.names = FALSE,sep = ",",comment.char = "#")
rnames<-gapa[,1]
mat_gapa<-data.matrix(gapa[,2:ncol(gapa)])
rownames(mat_gapa)<-rnames

my_pallete1<-colorRampPalette(c("skyblue","yellow","tomato"))(n=299)


heatmap.2(mat_gapa,
          main = "Waibira_B",
          notecol="black",
          density.info = "none",
          trace = "none",
          margins = c(12,9),
          col=my_pallete1,
          dendrogram="row",
          srtCol=360,
          Colv = "NA",
          Rowv=FALSE)

dev.copy2pdf(file= "/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/Figures/Figure3bms_1block.pdf")

#Figure 5
par(mfrow=c(2,2))#create plot space to include 4 plots

V(netW_15)$community <- clusW15$membership#create object including individual by group
V(netW_16)$community <- clusW16$membership
V(netW_17)$community <- clusW17$membership
V(netW_18)$community <- clusW18$membership

#create a triangle vertex shape option
mytriangle <- function(coords, v=NULL, params) {
  vertex.color <- params("vertex", "color")
  if (length(vertex.color) != 1 && !is.null(v)) {
    vertex.color <- vertex.color[v]
  }
  vertex.size <- 1/200 * params("vertex", "size")
  if (length(vertex.size) != 1 && !is.null(v)) {
    vertex.size <- vertex.size[v]
  }

  symbols(x=coords[,1], y=coords[,2], bg=vertex.color,
          stars=cbind(vertex.size, vertex.size, vertex.size),
          add=TRUE, inches=FALSE)
}

add_shape("triangle",
                 plot=mytriangle)


#membership each year by shape
V(netw15.aa)$shape <- c("circle", "square", "triangle")[V(netW_15)$community ]
V(netw16.aa)$shape <- c("square", "circle", "triangle")[V(netW_16)$community]
V(netw17.aa)$shape <- c("circle", "triangle","square")[V(netW_17)$community]
V(netw18.aa)$shape <- c("circle", "square", "triangle")[V(netW_18)$community]

#plot all sociograms
par(mfrow=c(2,2), mar=c(3, 3, 2, 0.5), mgp=c(2, 0.8, 0))

plot(dil_netW_15, vertex.color="dimgrey",#plot sociogram and repeat for each year
     edge.width=E(netW_15)$weight*7,edge.color="grey"(alpha=0.3, level=0.3),vertex.size=(strength(netW_15)*3),vertex.shape=V(netw15.aa)$shape ,
     vertex.label=NA, vertex.frame.color="white")
title("A", cex.main=1.5)


plot(dil_netW_16, vertex.color="dimgrey",#plot sociogram and repeat for each year
     edge.width=E(netW_16)$weight*7,edge.color="grey"(alpha=0.3, level=0.3),vertex.size=(strength(netW_16)*3),vertex.shape=V(netw16.aa)$shape ,
     vertex.label=NA, vertex.frame.color="white")
title("B", cex.main=1.5)


plot(dil_netW_17, vertex.color="dimgrey",#plot sociogram and repeat for each year
     edge.width=E(netW_17)$weight*7,edge.color="grey"(alpha=0.3, level=0.3),vertex.size=(strength(netW_17)*3),vertex.shape=V(netw17.aa)$shape ,
     vertex.label=NA, vertex.frame.color="white")
title("C", cex.main=1.5)


plot(dil_netW_18, vertex.color="dimgrey",#plot sociogram and repeat for each year
     edge.width=E(netW_18)$weight*7,edge.color="grey"(alpha=0.3, level=0.3),vertex.size=(strength(netW_18)*3),vertex.shape=V(netw18.aa)$shape ,
     vertex.label=NA, vertex.frame.color="white")
title("D", cex.main=1.5)

dev.copy2pdf(file= "/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/Figures/Figure4ms_20210520.pdf")

