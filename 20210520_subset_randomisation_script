#####Packages required#####
library(ape)
library(asnipe)
library(igraph)
library(vegan)
library(effsize)
library(ggplot2)
library(data.table)
library(adehabitatHR)
library(dplyr)


#get Sonso subset for analysis
sgbi1<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi2<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi3<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi<-cbind(sgbi1,sgbi2,sgbi3) #combine the group by individual data 
sgbi<-as.matrix(sgbi) #convert to matrix
Sonso<-t(sgbi)#transpose to get the correct format

#upload attributes for each individual
Sattributes<-read.csv(file.choose(),header = TRUE)
#define columns of gbi data by indiviual ID
colnames(Sonso)<-Sattributes$ID

#add observation number
Sonso_work <- cbind(Sonso, "observation"=1:nrow(Sonso)) 
Sonso_work<-as.data.frame(Sonso_work)


Sonso_work<-Sonso_work %>%
  mutate(N_split = floor(observation/6))


head(Sonso_work)
Split_S<-split(Sonso_work, f = Sonso_work$N_split)

Sub_S<- data.frame(matrix(ncol = 11, nrow = 0))
colnames(Sub_S)<-Sattributes$ID
head(Sub_S)
for(i in 1:length(Split_S)){
	row<-sample_n(Split_S[[i]], 1)
	Sub_S[i,]<-row[1,1:11]
}


#get Waibira subset for analysis
wgbi1<-as.matrix(read.csv(file.choose(),header=FALSE))
wgbi2<-as.matrix(read.csv(file.choose(),header=FALSE))
wgbi<-cbind(wgbi1,wgbi2) #combine the group by individual data 
wgbi<-as.matrix(wgbi) #convert to matrix
Waibira<-t(wgbi)#transpose to get the correct format

#upload attributes for each individual
Wattributes<-read.csv(file.choose(),header = TRUE)
#define columns of gbi data by indiviual ID
colnames(Waibira)<-Wattributes$ID

#add observation number
Waibira_work <- cbind(Waibira, "observation"=1:nrow(Waibira)) 
Waibira_work<-as.data.frame(Waibira_work)

Waibira_work<-Waibira_work %>%
  mutate(N_split = floor(observation/6))


head(Waibira_work)
Split_W<-split(Waibira_work, f = Waibira_work$N_split)

Sub_W<- data.frame(matrix(ncol = 22, nrow = 0))
colnames(Sub_W)<-Wattributes$ID
head(Sub_W)
for(i in 1:length(Split_W)){
	row<-sample_n(Split_W[[i]], 1)
	Sub_W[i,]<-row[1,1:22]
}

#create network object - Sonso
networkS_sub<- get_network(association_data=Sub_S, data_format="GBI")

#build adjacency graph for simple ratio network
netS_sub<-graph.adjacency(networkS_sub, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
permutations<-10000 #use 1000 permutations
randomS_sub <- network_permutation(Sub_S, association_matrix=networkS_sub, permutations=permutations)

#calculate mean weight in random networks
randomES_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_sub[i] <- mean(edges$weight)} 

mean(randomES_sub)

#create network with only above random edges
sub_Scut.off<-mean(randomES_sub)
dil_netS_sub <- delete_edges(netS_sub, E(netS_sub)[weight<sub_Scut.off])
plot(dil_netS_sub,edge.width= E(netS_sub)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5) 
  
#calculate network measures Sonso, check if they are different from random networks
#transitivity 
obsSt_sub<-transitivity(netS_sub)

#create object that holds results for all the random networks
random.St_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.St_sub[i] <- transitivity(net.r)} 
  
  #plot histogram of results from random networks with observed result in as red line
hist(random.St_sub, breaks=1,col="grey", main = "Sonso", xlab = "Transitivity")
abline(v=obsSt_sub, col="red")#add line for observed measure

	#compare results from random and observed networks
sum(random.St_sub >= obsSt_sub)/10000
sum(random.St_sub <= obsSt_sub)/10000

#mean strength 
obsSstr_sub<-mean(strength(netS_sub))

#create object that holds results for all the random networks
random.Sstr_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.Sstr_sub[i] <- mean(strength(net.r))} 
  
	 #plot histogram of results from random networks with observed result in as red line
hist(random.Sstr_sub, breaks=50,col="grey", main = "Sonso", xlab = "Mean Strength")
abline(v=obsSstr_sub, col="red")

	#compare results from random and observed networks
sum(random.Sstr_sub >= obsSstr_sub)/10000
sum(random.Sstr_sub <= obsSstr_sub)/10000

#modularity 
clusS_sub<- cluster_louvain(netS_sub) #calculate clusterng algorithm (Louavain's)
obsmodS_sub<-modularity(clusS_sub) #calculate modularity

#create object that holds results for all the random networks
random.modS_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  random.modS_sub[i] <- modularity(clus)} 
  
	#plot histogram of results from random networks with observed result in as red line
hist(random.modS_sub, breaks=50,col="grey", main = "Sonso", xlab = "Modularity")
abline(v=obsmodS_sub, col="red")

	#compare results from random and observed networks
sum(random.modS_sub >= obsmodS_sub)/10000
sum(random.modS_sub <= obsmodS_sub)/10000  


#create network object - Waibira
#create network object
networkW_sub<- get_network(association_data=Sub_W, data_format="GBI")

#build adjacency graph for simple ratio network
netW_sub<-graph.adjacency(networkW_sub, mode="undirected", weighted=TRUE, diag=FALSE)


#create random networks through data stream permutation
randomW_sub <- network_permutation(Sub_W, association_matrix=networkW_sub, permutations=permutations)

#calculate mean random edge weight 
randomEW_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_sub[i] <- mean(edges$weight)} 

mean(randomEW_sub)

#create above chance edges network
sub_Wcut.off<-mean(randomEW_sub)
dil_netW_sub <- delete_edges(netW_sub, E(netW_sub)[weight<sub_Wcut.off])
plot(dil_netW_sub,edge.width= E(netW_sub)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5) 
     
     
#calculate network measures
#transitivity 
obsWt_sub<-transitivity(netW_sub)

	#create object that holds results for all the random networks
random.Wt_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.Wt_sub[i] <- transitivity(net.r)} 
  
  #plot histogram of results from random networks with observed result in as red line
hist(random.Wt_sub, breaks=1,col="grey", main = "Waibira", xlab = "Transitivity")
abline(v=obsWt_sub, col="red")#add line for observed measure

	#compare results from random and observed networks
sum(random.Wt_sub >= obsWt_sub)/10000
sum(random.Wt_sub <= obsWt_sub)/10000

#mean strength 
obsWstr_sub<-mean(strength(netW_sub))

	#create object that holds results for all the random networks
random.Wstr_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.Wstr_sub[i] <- mean(strength(net.r))} 
  
	 #plot histogram of results from random networks with observed result in as red line
hist(random.Wstr_sub, breaks=50,col="grey", main = "Waibira", xlab = "Mean Strength")
abline(v=obsWstr_sub, col="red")

	#compare results from random and observed networks
sum(random.Wstr_sub >= obsWstr_sub)/10000
sum(random.Wstr_sub <= obsWstr_sub)/10000

#modularity 
clusW_sub<- cluster_louvain(netW_sub) #calculate clusterng algorithm (Louavain's)
obsmodW_sub<-modularity(clusW_sub) #calculate modularity

	#create object that holds results for all the random networks
random.modW_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  random.modW_sub[i] <- modularity(clus)} 
  
	#plot histogram of results from random networks with observed result in as red line
hist(random.modW_sub, breaks=50,col="grey", main = "Waibira", xlab = "Modularity")
abline(v=obsmodW_sub, col="red")

	#compare results from random and observed networks
sum(random.modW_sub >= obsmodW_sub)/10000
sum(random.modW_sub <= obsmodW_sub)/10000

#create Waibira_A network
Waibira_A_sub<-subset(Sub_W, select=c("ALF", "BEN", "DOU", "FID", "GER", "MAC", "MAS", "TAL", "TRS"))

#create network object
networkWA_sub<- get_network(association_data=Waibira_A_sub, data_format="GBI")

#build adjacency graph for simple ratio network
netWA_sub<-graph.adjacency(networkWA_sub, mode="undirected", weighted=TRUE, diag=FALSE)



#create random networks through data stream permutation
permutations<-10000 #use 1000 permutations
randomWA_sub <- network_permutation(Waibira_A_sub, association_matrix=networkWA_sub, permutations=permutations)

#calculate mean random edge weight 
randomEWA_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWA_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEWA_sub[i] <- mean(edges$weight)} 

mean(randomEWA_sub)

#create above chance edges network
sub_WAcut.off<-mean(randomEWA_sub)
dil_netWA_sub <- delete_edges(netWA_sub, E(netWA_sub)[weight<sub_WAcut.off])
plot(dil_netWA_sub,edge.width= E(netWA_sub)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5) 
     
#calculate network measures
#transitivity 
obsWAt_sub<-transitivity(netWA_sub)

	#create object that holds results for all the random networks
random.WAt_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWA_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.WAt_sub[i] <- transitivity(net.r)} 
  
  #plot histogram of results from random networks with observed result in as red line
hist(random.WAt_sub, breaks=1,col="grey", main = "Waibira_A_sub", xlab = "Transitivity")
abline(v=obsWAt_sub, col="red")#add line for observed measure

	#compare results from random and observed networks
sum(random.WAt_sub >= obsWAt_sub)/10000
sum(random.WAt_sub <= obsWAt_sub)/10000

#mean strength 
obsWAstr_sub<-mean(strength(netWA_sub))

	#create object that holds results for all the random networks
random.WAstr_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWA_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.WAstr_sub[i] <- mean(strength(net.r))} 
  
	 #plot histogram of results from random networks with observed result in as red line
hist(random.WAstr_sub, breaks=50,col="grey", main = "Waibira_A_sub", xlab = "Mean Strength")
abline(v=obsWAstr_sub, col="red")

	#compare results from random and observed networks
sum(random.WAstr_sub >= obsWAstr_sub)/10000
sum(random.WAstr_sub <= obsWAstr_sub)/10000

#modularity 
clusWA_sub<- cluster_louvain(netWA_sub) #calculate clusterng algorithm (Louavain's)
obsmodWA_sub<-modularity(clusWA_sub) #calculate modularity

	#create object that holds results for all the random networks
random.modWA_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWA_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  random.modWA_sub[i] <- modularity(clus)} 
  
	#plot histogram of results from random networks with observed result in as red line
hist(random.modWA_sub, breaks=50,col="grey", main = "Waibira_A_sub", xlab = "Modularity")
abline(v=obsmodWA_sub, col="red")

	#compare results from random and observed networks
sum(random.modWA_sub >= obsmodWA_sub)/10000
sum(random.modWA_sub <= obsmodWA_sub)/10000

     
#create Waibira_B network
Waibira_B_sub<-subset(Sub_W, select=c("ABO", "ARD", "CHN", "DAU", "ILA", "KAS", "KEV","LAF", "LAN", "MOR", "MUG", "SAM", "URS"))

#create network object
networkWB_sub<- get_network(association_data=Waibira_B_sub, data_format="GBI")

#build adjacency graph for simple ratio network
netWB_sub<-graph.adjacency(networkWB_sub, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomWB_sub <- network_permutation(Waibira_B_sub, association_matrix=networkWB_sub, permutations=permutations)

#calculate mean random edge weight 
randomEWB_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWB_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEWB_sub[i] <- mean(edges$weight)} 

mean(randomEWB_sub)

#create above chance edges network
sub_WBcut.off<-mean(randomEWB_sub)
#choose Waibira full mean randomE so that we keep unconnected nodes unconnected (only one dyad within Waibira B are connected in the full Waibira network)
dil_netWB_sub <- delete_edges(netWB_sub, E(netWB_sub)[weight<sub_Wcut.off])
plot(dil_netWB_sub,edge.width= E(netWB_sub)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5) 

#calculate network measures
#transitivity 
obsWBt_sub<-transitivity(netWB_sub)

	#create object that holds results for all the random networks
random.WBt_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWB_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.WBt_sub[i] <- transitivity(net.r)} 
  
  #plot histogram of results from random networks with observed result in as red line
hist(random.WBt_sub, breaks=1,col="grey", main = "Waibira_B_sub", xlab = "Transitivity")
abline(v=obsWBt_sub, col="red")#add line for observed measure

	#compare results from random and observed networks
sum(random.WBt_sub >= obsWBt_sub)/10000
sum(random.WBt_sub <= obsWBt_sub)/10000

#mean strength 
obsWBstr_sub<-mean(strength(netWB_sub))

	#create object that holds results for all the random networks
random.WBstr_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWB_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.WBstr_sub[i] <- mean(strength(net.r))} 
  
	 #plot histogram of results from random networks with observed result in as red line
hist(random.WBstr_sub, breaks=50,col="grey", main = "Waibira_B_sub", xlab = "Mean Strength")
abline(v=obsWBstr_sub, col="red")

	#compare results from random and observed networks
sum(random.WBstr_sub >= obsWBstr_sub)/10000
sum(random.WBstr_sub <= obsWBstr_sub)/10000

#modularity 
clusWB_sub<- cluster_louvain(netWB_sub) #calculate clusterng algorithm (Louavain's)
obsmodWB_sub<-modularity(clusWB_sub) #calculate modularity

	#create object that holds results for all the random networks
random.modWB_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWB_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  random.modWB_sub[i] <- modularity(clus)} 
  
	#plot histogram of results from random networks with observed result in as red line
hist(random.modWB_sub, breaks=50,col="grey", main = "Waibira_B_sub", xlab = "Modularity")
abline(v=obsmodWB_sub, col="red")

	#compare results from random and observed networks
sum(random.modWB_sub >= obsmodWB_sub)/10000
sum(random.modWB_sub <= obsmodWB_sub)/10000


setwd("/Users/gb64/Desktop")
write_graph(dil_netS_sub, "/Users/gb64/Desktop/elS_sub.txt")
write_graph(dil_netW_sub, "/Users/gb64/Desktop/elW_sub.txt")
write_graph(dil_netWA_sub, "/Users/gb64/Desktop/elWA_sub.txt")
write_graph(dil_netWB_sub, "/Users/gb64/Desktop/elWB_sub.txt")


D_full_sub<-D("elS_sub.txt","elW_sub.txt",0.45,0.45,0.1)
D_S_WA_sub<-D("elS_sub.txt","elWA_sub.txt",0.45,0.45,0.1)
D_S_WB_sub<-D("elS_sub.txt","elWB_sub.txt",0.45,0.45,0.1)

#comparisons between networks across years within communities
#year by year comparison 
#upload gbi data for Sonso
nrow(Sub_S)
Sub_S_15<-Sub_S[1:1824,]
Sub_S_16<-Sub_S[1825:3606,]
Sub_S_17<-Sub_S[3606:5242,]
Sub_S_18<-Sub_S[5242:6927,]

#create network object
networkS_15_sub<-get_network(association_data=Sub_S_15, data_format="GBI")

#build adjacency graph for simple ratio network
netS_15_sub<-graph.adjacency(networkS_15_sub, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomS_15_sub <- network_permutation(Sub_S_15, association_matrix= networkS_15_sub, permutations=permutations)


#calculate mean weight in random networks

randomES_15_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS_15_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_15_sub[i] <- mean(edges$weight)} 

mean(randomES_15_sub)

#create network with only above random edges
Scut.off_15_sub<-mean(randomES_15_sub)
dil_netS_15_sub <- delete_edges(netS_15_sub, E(netS_15_sub)[weight<Scut.off_15_sub])
plot(dil_netS_15_sub)
write_graph(dil_netS_15_sub, "/Users/gb64/Desktop/elS_15_sub.txt")

#create network object
networkS_16_sub<-get_network(association_data= Sub_S_16, data_format="GBI")

#build adjacency graph for simple ratio network
netS_16_sub<-graph.adjacency(networkS_16_sub, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomS_16_sub <- network_permutation(Sub_S_16, association_matrix=networkS_16_sub, permutations=permutations)


#calculate mean weight in random networks
randomES_16_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS_16_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_16_sub[i] <- mean(edges$weight)} 

mean(randomES_16_sub)

#create network with only above random edges
Scut.off_16_sub<-mean(randomES_16_sub)
dil_netS_16_sub <- delete_edges(netS_16_sub, E(netS_16_sub)[weight<Scut.off_16_sub])
plot(dil_netS_16_sub)
write_graph(dil_netS_16_sub, "/Users/gb64/Desktop/elS_16_sub.txt")


#create network object
networkS_17_sub<-get_network(association_data=Sub_S_17, data_format="GBI")

#build adjacency graph for simple ratio network
netS_17_sub<-graph.adjacency(networkS_17_sub, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomS_17_sub <- network_permutation(Sub_S_17, association_matrix=networkS_17_sub, permutations=permutations)


#calculate mean weight in random networks
randomES_17_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS_17_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_17_sub[i] <- mean(edges$weight)} 

mean(randomES_17_sub)

#create network with only above random edges
Scut.off_17_sub<-mean(randomES_17_sub)
dil_netS_17_sub <- delete_edges(netS_17_sub, E(netS_17_sub)[weight<Scut.off_17_sub])
plot(dil_netS_17_sub)
write_graph(dil_netS_17_sub, "/Users/gb64/Desktop/elS_17_sub.txt")


#create network object
networkS_18_sub<-get_network(association_data=Sub_S_18, data_format="GBI")

#build adjacency graph for simple ratio network
netS_18_sub<-graph.adjacency(networkS_18_sub, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomS_18_sub <- network_permutation(Sub_S_18, association_matrix=networkS_18_sub, permutations=permutations)


#calculate mean weight in random networks
randomES_18_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS_18_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_18_sub[i] <- mean(edges$weight)} 

mean(randomES_18_sub)

#create network with only above random edges
Scut.off_18_sub<-mean(randomES_18_sub)
dil_netS_18_sub <- delete_edges(netS_18_sub, E(netS_18_sub)[weight<Scut.off_18_sub])
plot(dil_netS_18_sub)
write_graph(dil_netS_18_sub, "/Users/gb64/Desktop/elS_18_sub.txt")

setwd("/Users/gb64/Desktop")
#Year by year comparison
D_S15_S16_sub<-D("elS_15_sub.txt","elS_16_sub.txt",0.45,0.45,0.1)
D_S15_S17_sub<-D("elS_15_sub.txt","elS_17_sub.txt",0.45,0.45,0.1)
D_S15_S18_sub<-D("elS_15_sub.txt","elS_18_sub.txt",0.45,0.45,0.1)
D_S16_S17_sub<-D("elS_16_sub.txt","elS_17_sub.txt",0.45,0.45,0.1)
D_S16_S18_sub<-D("elS_16_sub.txt","elS_18_sub.txt",0.45,0.45,0.1)
D_S17_S18_sub<-D("elS_17_sub.txt","elS_18_sub.txt",0.45,0.45,0.1)


#year by year comparison 
#upload gbi data for Sonso
nrow(Sub_W)
Sub_W_15<-Sub_W[1:513,]
Sub_W_16<-Sub_W[514:1638,]
Sub_W_17<-Sub_W[1639:2527,]
Sub_W_18<-Sub_W[2528:3187,]

#create network object
networkW_15_sub<-get_network(association_data=Sub_W_15, data_format="GBI")

#build adjacency graph for simple ratio network
netW_15_sub<-graph.adjacency(networkW_15_sub, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_15_sub <- network_permutation(Sub_W_15, association_matrix= networkW_15_sub, permutations=permutations)


#calculate mean weight in random networks

randomEW_15_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_15_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_15_sub[i] <- mean(edges$weight)} 

mean(randomEW_15_sub)

#create network with only above random edges
Wcut.off_15_sub<-mean(randomEW_15_sub)
dil_netW_15_sub <- delete_edges(netW_15_sub, E(netW_15_sub)[weight<Wcut.off_15_sub])
plot(dil_netW_15_sub)
write_graph(dil_netW_15_sub, "/Users/gb64/Desktop/elW_15_sub.txt")

#create network object
networkW_16_sub<-get_network(association_data= Sub_W_16, data_format="GBI")

#build adjacency graph for simple ratio network
netW_16_sub<-graph.adjacency(networkW_16_sub, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_16_sub <- network_permutation(Sub_W_16, association_matrix=networkW_16_sub, permutations=permutations)


#calculate mean weight in random networks
randomEW_16_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_16_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_16_sub[i] <- mean(edges$weight)} 

mean(randomEW_16_sub)

#create network with only above random edges
Wcut.off_16_sub<-mean(randomEW_16_sub)
dil_netW_16_sub <- delete_edges(netW_16_sub, E(netW_16_sub)[weight<Wcut.off_16_sub])
plot(dil_netW_16_sub)
write_graph(dil_netW_16_sub, "/Users/gb64/Desktop/elW_16_sub.txt")


#create network object
networkW_17_sub<-get_network(association_data=Sub_W_17, data_format="GBI")

#build adjacency graph for simple ratio network
netW_17_sub<-graph.adjacency(networkW_17_sub, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_17_sub <- network_permutation(Sub_W_17, association_matrix=networkW_17_sub, permutations=permutations)


#calculate mean weight in random networks
randomEW_17_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_17_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_17_sub[i] <- mean(edges$weight)} 

mean(randomEW_17_sub)

#create network with only above random edges
Wcut.off_17_sub<-mean(randomEW_17_sub)
dil_netW_17_sub <- delete_edges(netW_17_sub, E(netW_17_sub)[weight<Wcut.off_17_sub])
plot(dil_netW_17_sub)
write_graph(dil_netW_17_sub, "/Users/gb64/Desktop/elW_17_sub.txt")


#create network object
networkW_18_sub<-get_network(association_data=Sub_W_18, data_format="GBI")

#build adjacency graph for simple ratio network
netW_18_sub<-graph.adjacency(networkW_18_sub, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_18_sub <- network_permutation(Sub_W_18, association_matrix=networkW_18_sub, permutations=permutations)


#calculate mean weight in random networks
randomEW_18_sub<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_18_sub[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_18_sub[i] <- mean(edges$weight)} 

mean(randomEW_18_sub)

#create network with only above random edges
Wcut.off_18_sub<-mean(randomEW_18_sub)
dil_netW_18_sub <- delete_edges(netW_18_sub, E(netW_18_sub)[weight<Wcut.off_18_sub])
plot(dil_netW_18_sub)
write_graph(dil_netW_18_sub, "/Users/gb64/Desktop/elW_18_sub.txt")

setwd("/Users/gb64/Desktop")
#Year by year comparison
D_W15_W16_sub<-D("elW_15_sub.txt","elW_16_sub.txt",0.45,0.45,0.1)
D_W15_W17_sub<-D("elW_15_sub.txt","elW_17_sub.txt",0.45,0.45,0.1)
D_W15_W18_sub<-D("elW_15_sub.txt","elW_18_sub.txt",0.45,0.45,0.1)
D_W16_W17_sub<-D("elW_16_sub.txt","elW_17_sub.txt",0.45,0.45,0.1)
D_W16_W18_sub<-D("elW_16_sub.txt","elW_18_sub.txt",0.45,0.45,0.1)
D_W17_W18_sub<-D("elW_17_sub.txt","elW_18_sub.txt",0.45,0.45,0.1)

#subgroup stability across the years Waibira
clusW15_sub<- cluster_louvain(netW_15_sub) 
clusW16_sub<- cluster_louvain(netW_16_sub) 
clusW17_sub<- cluster_louvain(netW_17_sub) 
clusW18_sub<- cluster_louvain(netW_18_sub)

W_17a<- subset(Sub_W, select =c("ALF", "ARD", "DAU", "DOU" ,"FID", "GER", "ILA", "LAF", "MAC" ,"MAS",
"MUG", "SAM" ,"TRS"))
#create network object
networkW_17a<- get_network(association_data=W_17a, data_format="GBI")

#build adjacency graph for simple ratio network
netW_17a<-graph.adjacency(networkW_17a, mode="undirected", weighted=TRUE, diag=FALSE)

mean(strength(netW_17a))

W_17b<- subset(Sub_W, select =c("ABO", "BEN", "CHN", "KEV", "LAN", "MOR", "TAL", "URS"))
#create network object
networkW_17b<- get_network(association_data=W_17b, data_format="GBI")

#build adjacency graph for simple ratio network
netW_17b<-graph.adjacency(networkW_17b, mode="undirected", weighted=TRUE, diag=FALSE)

mean(strength(netW_17b))

WA_15_sub<-c("BDFGHIOPSU")
WA_16_sub<-c("BDGHIOPTU")
WA_17_sub<-c("ACDEFHJLMNORSTV")
WA_18_sub<-c("BCFGHIJMOPRSU")

library(stringdist)
stringdist(WA_15_sub, WA_16_sub)
stringdist(WA_15_sub, WA_17_sub)
stringdist(WA_15_sub, WA_18_sub)
stringdist(WA_16_sub, WA_17_sub)
stringdist(WA_16_sub, WA_18_sub)
stringdist(WA_17_sub, WA_18_sub)


par(mfrow=c(2,2))#create plot space to include 4 plots

V(netW_15_sub)$community <- clusW15_sub$membership#create object including individual by group
V(netW_16_sub)$community <- clusW16_sub$membership
V(netW_17_sub)$community <- clusW17_sub$membership
V(netW_18_sub)$community <- clusW18_sub$membership

#create a triangle vertex shape option
mytriangle <- function(coords, v=NULL, params) {
  vertex.color <- params("vertex", "color")
  if (length(vertex.color) != 1 && !is.null(v)) {
    vertex.color <- vertex.color[v]
  }
  vertex.size <- 1/200 * params("vertex", "size")
  if (length(vertex.size) != 1 && !is.null(v)) {
    vertex.size <- vertex.size[v]
  }

  symbols(x=coords[,1], y=coords[,2], bg=vertex.color,
          stars=cbind(vertex.size, vertex.size, vertex.size),
          add=TRUE, inches=FALSE)
}

add_shape("triangle",
                 plot=mytriangle)


#membership each year by shape
V(netw15.aa_sub)$shape <- c("circle", "square")[V(netW_15_sub)$community ]
V(netw16.aa_sub)$shape <- c("circle", "square")[V(netW_16_sub)$community]
V(netw17.aa_sub)$shape <- c("circle", "square")[V(netW_17_sub)$community]
V(netw18.aa_sub)$shape <- c("triangle", "circle", "square" )[V(netW_18_sub)$community]

#plot all sociograms
par(mfrow=c(2,2), mar=c(3, 3, 2, 0.5), mgp=c(2, 0.8, 0))

plot(dil_netW_15_sub, vertex.color="dimgrey",#plot sociogram and repeat for each year
     edge.width=E(netW_15_sub)$weight*7,edge.color="grey"(alpha=0.3, level=0.3),vertex.size=(strength(netW_15_sub)*3),vertex.shape=V(netw15.aa_sub)$shape ,
     vertex.label=NA, vertex.frame.color="white")
title("A", cex.main=1.5)


plot(dil_netW_16_sub, vertex.color="dimgrey",#plot sociogram and repeat for each year
     edge.width=E(netW_16_sub)$weight*7,edge.color="grey"(alpha=0.3, level=0.3),vertex.size=(strength(netW_16_sub)*3),vertex.shape=V(netw16.aa_sub)$shape ,
     vertex.label=NA, vertex.frame.color="white")
title("B", cex.main=1.5)


plot(dil_netW_17_sub, vertex.color="dimgrey",#plot sociogram and repeat for each year
     edge.width=E(netW_17_sub)$weight*7,edge.color="grey"(alpha=0.3, level=0.3),vertex.size=(strength(netW_17_sub)*3),vertex.shape=V(netw17.aa_sub)$shape ,
     vertex.label=NA, vertex.frame.color="white")
title("C", cex.main=1.5)


plot(dil_netW_18_sub, vertex.color="dimgrey",#plot sociogram and repeat for each year
     edge.width=E(netW_18_sub)$weight*7,edge.color="grey"(alpha=0.3, level=0.3),vertex.size=(strength(netW_18_sub)*3),vertex.shape=V(netw18.aa_sub)$shape ,
     vertex.label=NA, vertex.frame.color="white")
title("D", cex.main=1.5)

dev.copy2pdf(file= "/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/Figures/Figure4ms_20210520.pdf")


#linear model 
#comparing degree between subgroup
Wattributes$DEGREE.r_sub <- rowSums(networkW_sub)#calculate Strength of each individual and add to attribute table

	#calculate the coefficietn from the linear model:  'the effect of subgroup membership on Strength'
coef.r_sub <- coefficients(lm(DEGREE.r_sub~Group,data=Wattributes))[2]

	#see model results 
summary(lm(DEGREE.r_sub~Group,data=Wattributes))

	# Calculate strength distribution for each random network
deg_rand_sub <- apply(randomW_sub,1,function(x) { rowSums(x)})

	# Get coefficients for each randomisation
coefs_sub <- apply(deg_rand_sub,2,function(x) { coefficients(lm(x~Group,data=Wattributes))[2] })

# P values: check if the observed coefficient is significantly more or less than expected by chance
sum(coef.r_sub<coefs_sub)/10000
sum(coef.r_sub>coefs_sub)/10000

#plot from model findings
par(mfrow=c(1,2),cex.lab=1.5,mar=c(4,4,1,1), tck=0.01, mgp=c(2.5,0.5,0),las=1)

# Plot original boxplot
plot(Wattributes$DEGREE.r_sub~factor(Wattributes$Group),xlab="Group",ylab="Strength (original)",cex.axis=1, tck=0.01)
text(par('usr')[1] - (par('usr')[2]-par('usr')[1])/5,par('usr')[4] - (par('usr')[4]-par('usr')[3])/15, "A", cex=1.5) 
# Plot resulting distribution histogram
a_sub <- hist(coefs_sub,xlim=c(min(coefs_sub),max(coefs_sub)),col="black",xlab="Coefficient value",ylab="Frequency",breaks=100,cex.axis=1,main="", tck=0.01)
segments(coef.r_sub,0,coef.r_sub,max(a_sub$counts),col="red",lwd=3)
box()
text(par('usr')[1] - (par('usr')[2]-par('usr')[1])/5,par('usr')[4] - (par('usr')[4]-par('usr')[3])/15, "B", cex=1.5) 

dev.copy2pdf(file= "/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/Figures/Figure6supp_20210520.pdf")

#Figure S5

par(mfrow=c(2,3))
hist(random.St_sub, breaks=1,col="grey", main = "A)", xlab = "Transitivity")
par(xpd = TRUE)
lines(x = c(obsSt_sub,obsSt_sub), y = c(0, par('usr')[4]), col="red")

hist(random.Sstr_sub, breaks=50,col="grey", main = "B)", xlab = "Mean Strength")
par(xpd = TRUE)
lines(x = c(obsSstr_sub,obsSstr_sub), y = c(0, par('usr')[4]), col="red")

hist(random.modS_sub, breaks=50,col="grey", main = "C)", xlab = "Modularity")
par(xpd = TRUE)
lines(x = c(obsmodS_sub,obsmodS_sub), y = c(0, par('usr')[4]), col="red")

hist(random.Wt_sub, breaks=1,col="grey", main = "D)", xlab = "Transitivity")
par(xpd = TRUE)
lines(x = c(obsWt_sub,obsWt_sub), y = c(0, par('usr')[4]), col="red")

hist(random.Wstr_sub, breaks=50,col="grey", main = "E)", xlab = "Mean Strength")
par(xpd = TRUE)
lines(x = c(obsWstr_sub,obsWstr_sub), y = c(0, par('usr')[4]), col="red")

hist(random.modW_sub, breaks=50,col="grey", main = "F)", xlab = "Modularity")
par(xpd = TRUE)
lines(x = c(obsmodW_sub,obsmodW_sub), y = c(0, par('usr')[4]), col="red")

dev.copy2pdf(file= "/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/Figures/Figure5supp_20210520.pdf")

#sociograms of each group full and sub
par(mfrow=c(2,4))
plot(dil_netS,edge.width= E(netS)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5, main="Sonso_full") 
     
plot(dil_netW,edge.width= E(netW)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5, main="Waibira_full") 

plot(dil_netWA,edge.width= E(netWA)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5,main="Waibira_A_full") 
          
plot(dil_netWB,edge.width= E(netWB)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5, main="Wiabira_B_full") 


plot(dil_netS_sub,edge.width= E(netS_sub)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5, main="Sonso_sub") 
  
plot(dil_netW_sub,edge.width= E(netW_sub)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5, main="Waibira_sub") 
     
plot(dil_netWA_sub,edge.width= E(netWA_sub)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5, main="Waibira_A_sub") 

plot(dil_netWB_sub,edge.width= E(netWB_sub)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5, main="Waibira_B_sub") 
     
